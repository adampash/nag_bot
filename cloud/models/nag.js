// Generated by CoffeeScript 1.8.0
(function() {
  var Nag, ParseFinder, SlackNotify;

  ParseFinder = require('cloud/mixins/finder');

  SlackNotify = require('cloud/lib/slack_notifier');

  module.exports = Nag = ParseFinder.extend("Nag", {
    notify: function() {
      var channel_or_person, msg, you_or_person;
      you_or_person = ("@" + (this.get('created_by'))) === this.get('channel') ? "you" : this.get('created_by');
      channel_or_person = this.get('channel')[0] === "@" ? "" : "@channel ";
      msg = "" + channel_or_person + (this.getStarter()) + " " + you_or_person + " wanted me to remind you to *" + (this.get('message')) + "*";
      console.log("Nag time: " + (this.get('time')));
      console.log("NAG: " + (this.get('message')));
      return SlackNotify.notify(msg, {
        icon_emoji: ':nail_care:',
        channel: this.get('channel')
      });
    },
    getStarter: function() {
      var starters;
      starters = ["Oh hi!", "Hey you!", "Oh btw:", "Ooooo!", "I just remembered:"];
      return starters[Math.floor(Math.random() * starters.length)];
    }
  }, {
    create: function(text, creator) {
      var channel, days, message, nag, time;
      channel = text.split(' ')[0];
      days = this.getDays(text);
      time = text.match(/(at)?\s(\d+(:\d\d)?[a|p]m)\b/i)[2];
      message = text.match(/to\s(.+)$/i)[1];
      nag = new this({
        channel: channel,
        days: days,
        time: this.convertToMilitaryTime(time),
        message: message,
        created_by: creator
      });
      return nag.save();
    },
    getDays: function(text) {
      var days;
      days = text.match(/(on)?\s(everyday|weekdays|daily)\b/i);
      if (days != null) {
        days = days[2];
        if (days === "everyday" || days === "daily") {
          days = "mon,tue,wed,thu,fri,sat,sun";
        } else if (days === "weekdays") {
          days = "mon,tue,wed,thu,fri";
        }
        days = days.toUpperCase().split(',');
      } else {
        days = [];
        if (text.match(/\b((mon(day)?))\b/)) {
          days.push("MON");
        }
        if (text.match(/\b((tue((s)?day)?))\b/)) {
          days.push("TUE");
        }
        if (text.match(/\b((wed(nesday)?))\b/)) {
          days.push("WED");
        }
        if (text.match(/\b((thu((r(s)?(day)?)?)?))\b/)) {
          days.push("THU");
        }
        if (text.match(/\b((fri(day)?))\b/)) {
          days.push("FRI");
        }
        if (text.match(/\b((sat(urday)?))\b/)) {
          days.push("SAT");
        }
        if (text.match(/\b((sun(day)?))/)) {
          days.push("SUN");
        }
      }
      return days;
    },
    convertToMilitaryTime: function(time) {
      var ampm, hours, militaryHours, minutes, tempHours;
      ampm = time.match(/([a|p]m)/i)[1].toLowerCase();
      hours = time.match(/^(\d\d?):?/i)[1];
      if (time.match(/^\d\d?:(\d\d)/i) != null) {
        minutes = time.match(/^\d\d?:(\d\d)/i)[1];
      } else {
        minutes = "00";
      }
      if (ampm === "am") {
        militaryHours = hours;
        if (militaryHours === "12") {
          militaryHours = "00";
        }
      } else {
        if (ampm === "pm") {
          tempHours = parseInt(hours) + 2;
          if (tempHours < 10) {
            tempHours = "1" + tempHours;
          } else {
            tempHours = "2" + (tempHours - 10);
          }
          if (tempHours === "24") {
            tempHours = "12";
          }
          militaryHours = tempHours;
        }
      }
      return parseInt(militaryHours + minutes);
    }
  });

}).call(this);

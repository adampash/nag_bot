// Generated by CoffeeScript 1.8.0
(function() {
  var Nag, config, convertToMilitaryTime;

  config = require('cloud/config');

  Nag = require('cloud/models/nag');

  convertToMilitaryTime = function(time) {
    var ampm, hours, militaryHours, minutes, tempHours;
    ampm = time.match(/([a|p]m)/i)[1].toLowerCase();
    hours = time.match(/^(\d\d?):?/i)[1];
    if (time.match(/^\d\d?:(\d\d)/i) != null) {
      minutes = time.match(/^\d\d?:(\d\d)/i)[1];
    } else {
      minutes = "00";
    }
    console.log(ampm);
    console.log(hours);
    console.log(minutes);
    if (ampm === "am") {
      militaryHours = hours;
      if (militaryHours === "12") {
        militaryHours = "00";
      }
    } else {
      if (ampm === "pm") {
        tempHours = parseInt(hours) + 2;
        if (tempHours < 10) {
          tempHours = "1" + tempHours;
        } else {
          tempHours = "2" + (tempHours - 10);
        }
        if (tempHours === "24") {
          tempHours = "12";
        }
        militaryHours = tempHours;
      }
    }
    return parseInt(militaryHours + minutes);
  };

  exports.initialize = function() {
    return Parse.Cloud.define("new_nag", function(request, response) {
      var channel, days, message, nag, text, time, token, _ref;
      _ref = request.params, token = _ref.token, text = _ref.text;
      if (token === config.slack_token) {
        if (text.split(' ').length < 6) {
          if (text === "help") {
            return response.success("Usage: /nag [#channel|@person] [everyday|weekdays|m,w|etc] at [4pm|7:30am] to [do something]");
          } else {
            return response.error("Make sure you've got all the pieces");
          }
        }
        channel = text.split(' ')[0];
        days = text.match(/(on)?\s(everyday|weekdays|daily)\b/i);
        if (days != null) {
          days = days[2];
          if (days === "everyday" || days === "daily") {
            days = "mon,tue,wed,thu,fri,sat,sun";
          } else if (days === "weekdays") {
            days = "mon,tue,wed,thu,fri";
          }
          days = days.toUpperCase().split(',');
        } else {
          days = [];
          if (text.match(/\b((mon(day)?))\b/)) {
            days.push("MON");
          }
          if (text.match(/\b((tue((s)?day)?))\b/)) {
            days.push("TUE");
          }
          if (text.match(/\b((wed(nesday)?))\b/)) {
            days.push("WED");
          }
          if (text.match(/\b((thu((r(s)?(day)?)?)?))\b/)) {
            days.push("THU");
          }
          if (text.match(/\b((fri(day)?))\b/)) {
            days.push("FRI");
          }
          if (text.match(/\b((sat(urday)?))\b/)) {
            days.push("SAT");
          }
          if (text.match(/\b((sun(day)?))/)) {
            days.push("SUN");
          }
        }
        time = text.match(/at\s(\d+(:\d\d)?[a|p]m)\b/i)[1];
        message = text.match(/to\s(.+)$/i)[1];
        nag = new Nag({
          channel: channel,
          days: days,
          time: convertToMilitaryTime(time),
          message: message
        });
        return nag.save().then(function(nag) {
          return response.success("I'll remind " + channel + " to " + message + " on " + (days.join(',')) + " at " + time);
        }, function(err) {
          return response.error(err);
        });
      } else {
        return response.error('bad token');
      }
    });
  };

}).call(this);

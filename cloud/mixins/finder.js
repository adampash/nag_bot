// Generated by CoffeeScript 1.8.0
(function() {
  var ParseFinder;

  module.exports = ParseFinder = Parse.Object.extend("ParseFinder", {
    foo: 'bar'
  }, {
    find: function(id, includes) {
      var model, query, _i, _len;
      if (includes == null) {
        includes = [];
      }
      query = new Parse.Query(this);
      if (includes.length) {
        for (_i = 0, _len = includes.length; _i < _len; _i++) {
          model = includes[_i];
          query.include(model);
        }
      }
      return query.get(id);
    },
    findBy: function(options) {
      var query;
      query = this.build(options);
      return query.first();
    },
    quickFind: function(id) {
      var query;
      query = new Parse.Query(this);
      return query.get(id);
    },
    findAllEach: function(options) {
      return this.build(options);
    },
    findAll: function(options) {
      var query;
      query = this.build(options);
      return query.find();
    },
    build: function(options) {
      var key, model, query, value, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      query = new Parse.Query(this);
      if (options.limit != null) {
        query.limit(options.limit);
        delete options.limit;
      }
      if (options.ascending != null) {
        query.ascending(options.ascending);
        delete options.ascending;
      }
      if (options.descending != null) {
        query.descending(options.descending);
        delete options.descending;
      }
      if (options.include != null) {
        _ref = options.include;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          query.include(model);
        }
        delete options.include;
      }
      if (options.exists) {
        query.exists(options.exists);
        delete options.exists;
      }
      if (options.doesNotExist) {
        query.doesNotExist(options.doesNotExist);
        delete options.doesNotExist;
      }
      if (options.greaterThan) {
        _ref1 = options.greaterThan;
        for (key in _ref1) {
          value = _ref1[key];
          query.greaterThan(key, value);
        }
        delete options.greaterThan;
      }
      if (options.lessThan) {
        _ref2 = options.lessThan;
        for (key in _ref2) {
          value = _ref2[key];
          query.lessThan(key, value);
        }
        delete options.lessThan;
      }
      if (options.lessThanOrEqualTo) {
        _ref3 = options.lessThanOrEqualTo;
        for (key in _ref3) {
          value = _ref3[key];
          query.lessThanOrEqualTo(key, value);
        }
        delete options.lessThanOrEqualTo;
      }
      if (options.containsAll) {
        _ref4 = options.containsAll;
        for (key in _ref4) {
          value = _ref4[key];
          query.containsAll(key, value);
        }
        delete options.containsAll;
      }
      for (key in options) {
        value = options[key];
        query.equalTo(key, value);
      }
      return query;
    }
  });

}).call(this);
